/**
 * Hardware Store Job Service
 * 
 * This service handles creating and managing hardware store jobs that are
 * dynamically generated by the inventory agent when parts are needed.
 */

import { supabase } from './supabase';

export interface HardwareStoreJob {
  id: string;
  title: string;
  job_type: 'hardware_store';
  priority: 'high';
  estimated_duration: number;
  address: string;
  latitude: number;
  longitude: number;
  description: string;
  shopping_list: any[];
  preferred_supplier: string;
  estimated_cost: number;
  scheduling_notes: string;
}

export interface CreateHardwareStoreJobInput {
  user_id: string;
  planned_date: string;
  hardwareStoreJob: HardwareStoreJob;
}

export class HardwareStoreJobService {
  /**
   * Create a hardware store job from inventory analysis
   */
  static async createHardwareStoreJob(
    input: CreateHardwareStoreJobInput
  ): Promise<{ data: any | null; error: any }> {
    try {
      const { user_id, planned_date, hardwareStoreJob } = input;

      // Create the job in the job_locations table
      const { data: createdJob, error: createError } = await supabase
        .from('job_locations')
        .insert([{
          id: hardwareStoreJob.id,
          user_id: user_id,
          title: hardwareStoreJob.title,
          description: hardwareStoreJob.description,
          address: hardwareStoreJob.address,
          latitude: hardwareStoreJob.latitude,
          longitude: hardwareStoreJob.longitude,
          scheduled_start: `${planned_date}T09:00:00.000Z`,
          scheduled_end: `${planned_date}T17:00:00.000Z`,
          estimated_duration: hardwareStoreJob.estimated_duration,
          priority: hardwareStoreJob.priority,
          job_type: hardwareStoreJob.job_type,
          status: 'scheduled',
          // Store hardware store specific data in metadata
          metadata: {
            shopping_list: hardwareStoreJob.shopping_list,
            preferred_supplier: hardwareStoreJob.preferred_supplier,
            estimated_cost: hardwareStoreJob.estimated_cost,
            scheduling_notes: hardwareStoreJob.scheduling_notes,
            created_by_agent: true,
            agent_type: 'inventory',
            created_at: new Date().toISOString()
          }
        }])
        .select()
        .single();

      if (createError) throw createError;

      console.log(`‚úÖ Hardware store job created: ${hardwareStoreJob.title}`);
      console.log(`üìç Location: ${hardwareStoreJob.address}`);
      console.log(`üõí Items: ${hardwareStoreJob.shopping_list.length}`);
      console.log(`üí∞ Estimated cost: $${hardwareStoreJob.estimated_cost}`);

      return { data: createdJob, error: null };
    } catch (error) {
      console.error('Error creating hardware store job:', error);
      return { data: null, error };
    }
  }

  /**
   * Insert hardware store job into existing job list
   * Places it after emergency/inspection jobs but before service jobs
   */
  static async insertIntoJobList(
    hardwareStoreJobId: string,
    existingJobs: any[]
  ): Promise<{ prioritized_jobs: any[] }> {
    try {
      // Find the insertion point: after emergency/inspection, before service
      let insertionIndex = existingJobs.length; // Default to end

      for (let i = 0; i < existingJobs.length; i++) {
        const job = existingJobs[i];
        // Insert before first service job
        if (job.job_type === 'service') {
          insertionIndex = i;
          break;
        }
      }

      // Create hardware store job entry for the job list
      const hardwareStoreJobEntry = {
        job_id: hardwareStoreJobId,
        priority_rank: insertionIndex + 1,
        estimated_start_time: this.calculateStartTime(existingJobs, insertionIndex),
        estimated_end_time: this.calculateEndTime(existingJobs, insertionIndex),
        priority_reason: 'Hardware store stop required for critical parts',
        job_type: 'hardware_store' as const,
        buffer_time_minutes: 15,
        priority_score: 750, // Between inspection (500+) and emergency (1000+)
        scheduling_notes: 'Must complete before service jobs to ensure parts availability',
        business_priority_tier: 'hardware_store',
        geographic_reasoning: 'Optimally placed before service jobs',
        travel_time_to_next: 15
      };

      // Insert into the array and update priority ranks
      const newJobList = [...existingJobs];
      newJobList.splice(insertionIndex, 0, hardwareStoreJobEntry);

      // Update priority ranks for jobs that come after
      for (let i = insertionIndex + 1; i < newJobList.length; i++) {
        newJobList[i].priority_rank = i + 1;
      }

      console.log(`üìã Hardware store job inserted at position ${insertionIndex + 1}`);
      console.log(`üéØ Total jobs in list: ${newJobList.length}`);

      return { prioritized_jobs: newJobList };
    } catch (error) {
      console.error('Error inserting hardware store job into list:', error);
      throw error;
    }
  }

  /**
   * Get all hardware store jobs for a user and date
   */
  static async getHardwareStoreJobs(
    userId: string,
    plannedDate: string
  ): Promise<{ data: any[] | null; error: any }> {
    try {
      const { data, error } = await supabase
        .from('job_locations')
        .select('*')
        .eq('user_id', userId)
        .gte('scheduled_start', `${plannedDate}T00:00:00.000Z`)
        .lt('scheduled_start', `${plannedDate}T23:59:59.999Z`)
        .eq('job_type', 'hardware_store')
        .order('created_at', { ascending: true });

      if (error) throw error;
      return { data, error: null };
    } catch (error) {
      console.error('Error getting hardware store jobs:', error);
      return { data: null, error };
    }
  }

  /**
   * Delete a hardware store job
   */
  static async deleteHardwareStoreJob(
    jobId: string
  ): Promise<{ data: any | null; error: any }> {
    try {
      const { data, error } = await supabase
        .from('job_locations')
        .delete()
        .eq('id', jobId)
        .eq('job_type', 'hardware_store')
        .select()
        .single();

      if (error) throw error;

      console.log(`üóëÔ∏è Hardware store job deleted: ${jobId}`);
      return { data, error: null };
    } catch (error) {
      console.error('Error deleting hardware store job:', error);
      return { data: null, error };
    }
  }

  /**
   * Calculate estimated start time for hardware store job
   */
  private static calculateStartTime(existingJobs: any[], insertionIndex: number): string {
    if (insertionIndex === 0) {
      // First job - start at 8 AM
      return '08:00';
    }

    const previousJob = existingJobs[insertionIndex - 1];
    if (previousJob?.estimated_end_time) {
      // Parse end time and add 15 minutes travel buffer
      const [hours, minutes] = previousJob.estimated_end_time.split(':').map(Number);
      const endTime = new Date();
      endTime.setHours(hours, minutes + 15, 0, 0);
      
      return endTime.toTimeString().slice(0, 5);
    }

    // Fallback calculation
    const baseHour = 8 + insertionIndex;
    return `${baseHour.toString().padStart(2, '0')}:00`;
  }

  /**
   * Calculate estimated end time for hardware store job
   */
  private static calculateEndTime(existingJobs: any[], insertionIndex: number): string {
    const startTime = this.calculateStartTime(existingJobs, insertionIndex);
    const [hours, minutes] = startTime.split(':').map(Number);
    
    // Assume 45 minutes for hardware store visit
    const endTime = new Date();
    endTime.setHours(hours, minutes + 45, 0, 0);
    
    return endTime.toTimeString().slice(0, 5);
  }
} 