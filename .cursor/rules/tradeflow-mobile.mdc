---
description: TradeFlow Mobile App development patterns and conventions
globs: 
alwaysApply: true
---

# TradeFlow Mobile App - Development Rules

## Project Overview
React Native Expo app with TypeScript for intelligent tradesmen tracking with maps, GPS tracking, and user routes. Uses Jotai for state management, expo-router for navigation, and Supabase for backend.

## Core Patterns & Conventions

### 1. Navigation & Headers
- **ALWAYS** use custom header configurations in app/_layout.tsx
- **NEVER** use default back buttons - always implement custom TouchableOpacity wrapped icons
- **REQUIRED** header pattern for new screens:
```typescript
<Stack.Screen 
  name="screen-name"
  options={({ navigation }) => ({
    title: 'Screen Title',
    headerBackTitle: '',
    headerLeft: () => (
      <TouchableOpacity 
        onPress={() => navigation.goBack()}
      >
        <FontAwesome 
          name="arrow-left" 
          size={20} 
          color={colors.primary} 
        />
      </TouchableOpacity>
    ),
  })}
/>
```

### 2. Colors & Theming
- **ALWAYS** import colors from `@/constants/Colors`
- **ALWAYS** use the global theme system from `@/constants/Theme`
- **NEVER** use hardcoded colors, spacing, or typography - always reference the theme system
- **REQUIRED** theme imports:
```typescript
import { useColorScheme } from '@/components/useColorScheme';
import Colors from '@/constants/Colors';
import { typography, spacing, shadows, radius, touchTargets } from '@/constants/Theme';

// In component:
const colorScheme = useColorScheme();
const colors = Colors[colorScheme ?? 'light'];
```

### 3. Tab Routes & Headers
- **ALWAYS** set `headerShown: false` in tab layout to disable default navigation headers
- **ALWAYS** use the Header component from `@/components/Header` in all tab screens
- **DEFAULT**: All tab routes should use the Header component instead of native navigation headers
- **REQUIRED** tab screen structure with Header:
```typescript
export default function TabScreen() {
  const colorScheme = useColorScheme();
  const colors = Colors[colorScheme ?? 'light'];
  const { navigate } = useAppNavigation();

  const handleProfilePress = () => {
    navigate('/profile');
  };
  
  return (
    <SafeAreaView style={[styles.safeArea, { backgroundColor: colors.background }]}>
      <View style={styles.container}>
        <Header
          title="Screen Title"
          profile={{
            imageUrl: 'https://avatars.githubusercontent.com/u/124599?v=4',
            name: 'John Doe',
            onPress: handleProfilePress,
          }}
          rightAction={{
            icon: 'action-icon',
            onPress: handleRightAction,
          }}
        />
        {/* Screen content */}
      </View>
    </SafeAreaView>
  );
}
```

### 4. Component Structure
- **ALWAYS** use SafeAreaView for screen containers
- **REQUIRED** screen structure:
```typescript
export default function ScreenName() {
  const colorScheme = useColorScheme();
  const colors = Colors[colorScheme ?? 'light'];
  
  return (
    <SafeAreaView style={[styles.safeArea, { backgroundColor: colors.background }]}>
      {/* Screen content */}
    </SafeAreaView>
  );
}
```

### 5. Component Reuse & Creation
- **ALWAYS** check `@/components/` and `@/components/ui/` for existing shared components before creating new ones
- **REQUIRED** existing components to check first:
  - `Avatar` - User profile images with fallback letters
  - `Button` - Multi-variant buttons (primary, secondary, outline, ghost)
  - `Card` - Container cards with shadows and theming
  - `SearchBar` - Search input with clear functionality
  - `StatusBadge` - Status indicators (available, low_stock, out_of_stock)
  - `TextInput` - Form inputs with validation and labels
  - `Header` - Reusable header with actions and profile support
  - `ExpoLink` - Navigation link component
  - `QuantitySelector` - Quantity input with plus/minus buttons for numeric values, uses number values (not strings), supports decimal/integer mode
  - `QuickActionButton` - Reusable quick action button with icon and title for home screen actions
  - `EmptyState` - Reusable empty state component with customizable icon, title, description, and optional create button
  - **Form Components** - React Hook Form integrated components in `@/components/forms/`:
    - `FormProvider` - Context wrapper for React Hook Form
    - `FormTextInput` - Text input with built-in validation
    - `FormQuantitySelector` - Quantity selector with validation
    - `FormSelect` - Dropdown selector with modal interface
    - `FormActions` - Standardized submit/cancel button pair for consistent form actions.
- **IF** component doesn't exist, create it in `@/components/` folder
- **IF** it's a UI component, create it in `@/components/ui/` folder and export from `@/components/ui/index.ts`
- **IF** it's a form component, create it in `@/components/forms/` folder and export from `@/components/forms/index.ts`

### 5.1. Component Architecture & Folder Structure
- **@/components/ui/** - Contains primitive, low-level UI components (building blocks)
  - These are pure, reusable components with minimal dependencies
  - Examples: Button, TextInput, Card, SearchBar, StatusBadge
  - Should NOT import from `@/components/` (only from React Native, icons, colors, etc.)
  - Must be exported from `@/components/ui/index.ts`
  - **MUST** use the new theme system from `@/constants/Theme.ts`
- **@/components/forms/** - Contains React Hook Form integrated components
  - These components integrate with React Hook Form for validation and state management
  - Examples: FormProvider, FormTextInput, FormButton, FormQuantitySelector, FormSelect
  - Can import from `@/components/ui/` and React Hook Form
  - Must be exported from `@/components/forms/index.ts`
  - **MUST** use React Hook Form patterns and validation
  - **MUST** use shared `BaseFormFieldProps` and `FormValidationRules` interfaces for consistency
  - **MUST** inherit from base component props (e.g., FormTextInput extends TextInputProps, FormButton extends ButtonProps)
  - **MUST** use `Omit<BaseProps, 'conflictingProp'>` when base component props conflict with form-specific behavior
- **@/components/** - Contains higher-level, composed components
  - These components are built using `@/components/ui/` components
  - Examples: Header (uses Button from ui), Avatar (uses Card styling)
  - Can import from both `@/components/ui/` and other utilities
  - Should compose multiple UI components to create complex functionality

### 5.2. Rule File Maintenance
- **CRITICAL**: When creating new components in `@/components/` or `@/components/ui/`:
  - **ALWAYS** update this rules file (.cursor/rules/tradeflow-mobile.mdc)
  - Add the new component to the appropriate section in "Existing Component Inventory"
  - Include component description, key features, and usage guidance
  - Update the component lists in sections 5, 9, and the inventory section
- **WHEN** to update:
  - Creating any new reusable component
  - Modifying existing component functionality significantly
  - Adding new component variants or props

### 6. Imports & Dependencies
- **ALWAYS** import TouchableOpacity from 'react-native' when creating custom headers
- **ALWAYS** import FontAwesome from '@expo/vector-icons/FontAwesome' for icons
- **PREFER** UI components from `@/components/ui` over native components
- **REQUIRED** navigation imports:
```typescript
import { useRouter } from 'expo-router';
import { TouchableOpacity } from 'react-native';
import { FontAwesome } from '@expo/vector-icons';
```

### 7. State Management
- **ALWAYS** use Jotai atoms for global state from `@/store/atoms`
- **PATTERN** for state usage:
```typescript
import { useAtom } from 'jotai';
import { someAtom } from '@/store/atoms';

const [someState, setSomeState] = useAtom(someAtom);
```

### 8. Styling Patterns
- **ALWAYS** use StyleSheet.create for styles
- **ALWAYS** apply dynamic colors using the colors object
- **PATTERN** for responsive styling:
```typescript
const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
  },
  container: {
    flex: 1,
    padding: 16,
  },
});
```

### 9. UI Components Usage
- **ALWAYS** use existing UI components from `@/components/ui` before creating new ones
- **AVAILABLE** components:
  - `<Button>` - Use instead of TouchableOpacity for actions
  - `<TextInput>` - Use instead of RN TextInput for forms
  - `<Card>` - Use for content containers
  - `<SearchBar>` - Use for search functionality
  - `<StatusBadge>` - Use for status indicators
  - `<Avatar>` - Use for user profile images
  - `<Header>` - Use for screen headers with actions
  - `<QuantitySelector>` - Use for numeric quantity input with plus/minus buttons, uses number values (not strings), supports decimal/integer mode
  - `<EmptyState>` - Use for empty state displays with optional create button functionality

### 9.1. Form Components Usage
- **ALWAYS** use React Hook Form integrated components from `@/components/forms` for form development
- **ALWAYS** use `<FormActions>` component at the bottom of all forms for consistent submit/cancel button behavior
- **AVAILABLE** form components:
  - `<FormProvider>` - Context wrapper for React Hook Form, wrap entire form with this
  - `<FormTextInput>` - Text input with built-in validation and error display
  - `<FormQuantitySelector>` - Quantity selector with validation support, uses number values (not strings)
  - `<FormSelect>` - Dropdown selector with modal interface and validation
  - `<FormActions>` - Standardized submit/cancel button pair with consistent styling and behavior
- **PATTERN** for form development:
```typescript
import { useForm } from 'react-hook-form';
import { FormProvider, FormTextInput, FormActions, BaseFormFieldProps, FormValidationRules } from '@/components/forms';

const methods = useForm<FormData>({
  defaultValues: initialData,
  mode: 'onChange',
});

const onSubmit = async (data: FormData) => {
  try {
    await submitForm(data);
    // Success handling
  } catch (error) {
    // Error handling
  }
};

const handleCancel = () => {
  navigation.goBack();
};

return (
  <FormProvider methods={methods}>
    <FormTextInput name="firstName" label="First Name" required />
    <FormTextInput name="lastName" label="Last Name" required />
    <FormTextInput name="email" label="Email Address" />
    <FormQuantitySelector name="quantity" label="Quantity" required />
    <FormSelect name="category" label="Category" options={options} required />
    {/* Form content */}
    <FormActions
      onSubmit={handleSubmit(onSubmit)}
      onCancel={handleCancel}
      isSubmitting={isSubmitting}
      submitTitle="Save"
      cancelTitle="Cancel"
    />
  </FormProvider>
);
```

### 10. Error Handling
- **ALWAYS** wrap async operations in try-catch blocks
- **ALWAYS** show user-friendly error messages using Alert
- **PATTERN** for error handling:
```typescript
try {
  // Operation
} catch (error) {
  console.error('Error description:', error);
  Alert.alert('Error', 'User-friendly message');
}
```

### 11. Form Development Patterns
- **ALWAYS** use React Hook Form for form state management and validation
- **ALWAYS** wrap forms with `<FormProvider>` component
- **ALWAYS** use form components from `@/components/forms/` instead of native inputs
- **ALWAYS** use `<FormActions>` component at the bottom of all forms for consistent submit/cancel behavior
- **ALWAYS** use shared types `BaseFormFieldProps` and `FormValidationRules` for consistency across form fields
- **ALWAYS** import shared types from `@/components/forms` when creating custom form components
- **ALWAYS** use `label` prop on form components to display field titles above inputs
- **ALWAYS** use `required` prop instead of manual validation rules for required fields
- **ALWAYS** use the shared `Label` component from `@/components/ui` for consistent label styling across all components
- **ALWAYS** use the shared `ErrorMessage` component from `@/components/ui` for consistent error message styling
- **ALWAYS** use number types (not strings) for quantity fields in form interfaces and components

### 11.0. Quantity Field Usage
- **CRITICAL**: Both `QuantitySelector` and `FormQuantitySelector` components work with number values (not strings)
- **ALWAYS** use `quantity: number` in form interfaces, not `quantity: string`
- **PATTERN** for quantity fields in forms:
```typescript
interface FormData {
  name: string;
  quantity: number; // Always use number, not string
}

// Default values
const defaultValues: FormData = {
  name: '',
  quantity: 0, // Use number, not '0'
};

// Form submission
const onSubmit = (data: FormData) => {
  // data.quantity is already a number, no conversion needed
  const updateData = {
    name: data.name.trim(),
    quantity: data.quantity, // Direct usage as number
  };
};
```

### 11.1. Form Page Structure Pattern
- **ALWAYS** create forms as separate pages/screens instead of inline modals when they contain multiple fields
- **REQUIRED** form page structure:
```typescript
export default function FormScreen() {
  const router = useRouter();
  const colorScheme = useColorScheme();
  const colors = Colors[colorScheme ?? 'light'];
  
  // Form setup
  const methods = useForm<FormData>({
    defaultValues: defaultFormValues,
    mode: 'onChange',
  });

  const { handleSubmit, formState: { isSubmitting } } = methods;

  const onSubmit = async (data: FormData) => {
    try {
      await submitData(data);
      Alert.alert('Success', 'Message', [{ text: 'OK', onPress: () => router.back() }]);
    } catch (error) {
      Alert.alert('Error', 'Message', [{ text: 'OK' }]);
    }
  };

  const handleCancel = () => {
    router.back();
  };

  return (
    <SafeAreaView style={[styles.safeArea, { backgroundColor: colors.background }]}>
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.container}
      >
        <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
          <View style={styles.header}>
            <Text style={[styles.title, { color: colors.text }]}>Form Title</Text>
            <Text style={[styles.subtitle, { color: colors.placeholder }]}>
              Form description
            </Text>
          </View>

          <FormProvider methods={methods}>
            <View style={styles.form}>
              {/* Form fields */}
            </View>
            <FormActions
              onSubmit={handleSubmit(onSubmit)}
              onCancel={handleCancel}
              isSubmitting={isSubmitting}
              submitTitle="Submit"
              cancelTitle="Cancel"
            />
          </FormProvider>
        </ScrollView>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}
```
- **ALWAYS** add navigation configuration to `app/_layout.tsx` for new form screens
- **ALWAYS** add ` presentation: 'modal'` for the new form screens that are listed in the `app/_layout.tsx`
- **REQUIRED** navigation pattern in `_layout.tsx`:
```typescript
<Stack.Screen 
  name="form-screen-name"
  options={({ navigation }) => ({
    presentation: 'modal',
    title: 'Form Screen Title',
    headerBackTitle: '',
    headerLeft: () => (
      <TouchableOpacity 
        onPress={() => navigation.goBack()}
        style={{
          ...touchTargets.styles.minimum,
          ...spacing.helpers.paddingHorizontal('s'),
          justifyContent: 'center',
        }}
      >
        <FontAwesome 
          name="arrow-left" 
          size={20} 
          color={colors.primary} 
        />
      </TouchableOpacity>
    ),
  })}
/>
```
- **ALWAYS** use `router.back()` for form cancel/success navigation
- **ALWAYS** use `navigate('/form-screen-name')` to open form screens from other screens
- **PATTERN** for form validation using shared interfaces:
```typescript
import { useForm } from 'react-hook-form';
import { FormValidationRules } from '@/components/forms';

const methods = useForm<FormData>({
  defaultValues: initialData,
  mode: 'onChange', // Real-time validation
});

// Custom validation rules using shared FormValidationRules interface
const emailRules: FormValidationRules = {
  pattern: {
    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
    message: 'Invalid email address'
  }
};

<FormTextInput
  name="email"
  label="Email Address"
  required
  rules={emailRules}
/>
```
- **PATTERN** for creating custom form components:
```typescript
import { BaseFormFieldProps, FormValidationRules } from '@/components/forms';
import { Label, ErrorMessage } from '@/components/ui';

interface CustomFormComponentProps extends BaseFormFieldProps {
  // Additional props specific to your component
  customProp?: string;
}

export const CustomFormComponent: React.FC<CustomFormComponentProps> = ({
  name,
  rules,
  label,
  required = false,
  customProp,
}) => {
  const { control } = useFormContext();

  const validationRules = {
    required: required ? (rules?.required || `${label || name} is required`) : undefined,
    ...rules,
  };
  
  return (
    <View style={{ marginBottom: spacing.m }}>
      {label && <Label text={label} required={required} />}
      <Controller
        control={control}
        name={name}
        rules={validationRules}
        render={({ field, fieldState: { error } }) => (
          <View>
            {/* Your custom form component implementation */}
            <ErrorMessage message={error?.message} />
          </View>
        )}
      />
    </View>
  );
};
```
- **PATTERN** for inheriting from base component props:
```typescript
import { BaseComponent, BaseComponentProps } from '@/components/ui/BaseComponent';
import { BaseFormFieldProps } from '@/components/forms';

// When base component props conflict with form behavior, use Omit
interface FormComponentProps extends BaseFormFieldProps, Omit<BaseComponentProps, 'onPress'> {
  onPress?: () => void; // Custom form-specific behavior
  type?: 'submit' | 'button'; // Additional form props
}

export const FormComponent: React.FC<FormComponentProps> = ({
  name,
  rules,
  onPress,
  type = 'button',
  ...baseProps // All other base component props
}) => {
  const { control } = useFormContext();
  
  return (
    <Controller
      control={control}
      name={name}
      rules={rules}
      render={({ field }) => (
        <BaseComponent
          {...baseProps}
          onPress={handleFormPress}
          // Override specific props for form behavior
        />
      )}
    />
  );
};
```
- **PATTERN** for form submission with FormActions:
```typescript
const onSubmit = async (data: FormData) => {
  try {
    await submitForm(data);
    // Success handling (navigation, notifications, etc.)
  } catch (error) {
    // Error handling
  }
};

const handleCancel = () => {
  navigation.goBack();
};

<FormActions
  onSubmit={handleSubmit(onSubmit)}
  onCancel={handleCancel}
  isSubmitting={isSubmitting}
  submitTitle="Save Changes"
  cancelTitle="Cancel"
  submitButtonVariant="primary"
/>
```

### 12. File Organization
- Place screens in `app/` directory
- Place reusable components in `components/`
- Place UI components in `components/ui/`
- Place form components in `components/forms/`
- Place utilities in `utils/`
- Place services in `services/`

### 13. TypeScript
- **ALWAYS** use proper TypeScript types
- **ALWAYS** define interfaces for props and state
- **PREFER** type inference over explicit typing where clear

### 14. Theme System Usage
- **ALWAYS** use `typography.*` objects for all text styling instead of hardcoded fontSize/fontWeight
- **ALWAYS** use `spacing.*` values for all margins, padding, and layout spacing
- **ALWAYS** use `shadows.*()` functions for elevation effects - pass colorScheme parameter
- **ALWAYS** use `radius.*` values for border radius
- **ALWAYS** use `touchTargets.*` values for minimum touch areas
- **PATTERN** for theme-aware components:
```typescript
import { typography, spacing, shadows, radius, touchTargets } from '@/constants/Theme';

const styles = StyleSheet.create({
  container: {
    ...spacing.helpers.padding('m'),
    borderRadius: radius.m,
    ...shadows.subtle(colorScheme),
  },
  title: {
    ...typography.h3,
    color: colors.text,
    marginBottom: spacing.s,
  },
  button: {
    ...touchTargets.styles.minimum,
    borderRadius: radius.m,
  },
});
```

## Color System Reference
Primary colors available in Colors.ts:
- `colors.primary` - Main brand color (Sea Green)
- `colors.secondary` - Secondary brand color
- `colors.accent` - Accent color
- `colors.background` - Screen background
- `colors.card` - Card background
- `colors.text` - Primary text
- `colors.placeholder` - Placeholder text
- `colors.border` - Border color
- `colors.error` - Error color
- `colors.success` - Success color
- `colors.warning` - Warning color

## Icons
- **ALWAYS** use FontAwesome icons from '@expo/vector-icons/FontAwesome'
- **STANDARD** icon size is 20px for headers, 24px for content
- **ALWAYS** use `colors.primary` for icon colors unless specific use case

## Existing Component Inventory
Before creating new components, check these existing ones:

### UI Components (`@/components/ui/`) - Building Blocks
- **Button** - Multi-variant buttons (primary, secondary, outline, ghost) with loading states, theme shadows, proper touch targets, and responsive scaling
- **Card** - Container with theme shadows, responsive spacing, and customizable padding using theme system
- **SearchBar** - Search input with clear functionality and proper theming
- **StatusBadge** - Status indicators (available, low_stock, out_of_stock)
- **TextInput** - Form inputs with labels, validation, error states, focus handling, and theme typography/spacing
- **Label** - Reusable label component with consistent typography and required field asterisk styling
- **ErrorMessage** - Reusable error message component with consistent typography and red error color styling
- **EmptyState** - Reusable empty state component with customizable FontAwesome icon, title, description, and optional callback-based create button (button shows when createButtonText is provided)

### Form Components (`@/components/forms/`) - React Hook Form Integrated
- **FormProvider** - Context wrapper for React Hook Form, provides form context to child components
- **FormTextInput** - Text input with built-in validation, error display, and React Hook Form integration (extends TextInputProps)
- **FormQuantitySelector** - Quantity selector with validation support and React Hook Form integration, uses number values (not strings) (extends QuantitySelector props)
- **FormSelect** - Dropdown selector with modal interface, validation, and React Hook Form integration (uses BaseFormFieldProps)
- **FormActions** - Standardized submit/cancel button pair with consistent styling, loading states, and proper spacing for form bottoms
- **NOTE**: `FormButton` is an internal component used only within `FormActions` - do not use directly
- **SHARED PROPS**: All form components inherit `label` and `required` props from BaseFormFieldProps:
  - `label` - Optional string displayed above the component as a title using the shared Label component
  - `required` - Optional boolean that adds required validation and asterisk to label using the shared Label component
- **SHARED STYLING**: All form components use the shared ErrorMessage component for consistent error display
- **Shared Types** (defined in `@/components/forms/index.ts`):
  - `BaseFormFieldProps` - Common props for all form fields (name, rules, label, required)
  - `FormValidationRules` - Standardized validation rules interface
  - `SelectOption` - Interface for dropdown options

### Composed Components (`@/components/`) - Built using UI components
- **Avatar** - Profile images with letter fallbacks, multiple sizes (xs, s, m, l, xl)
- **Header** - Reusable header with left/right actions, profile support, and proper theming (uses Button from ui)
- **ExpoLink** - Navigation link component with expo-router integration
- **QuantitySelector** - Quantity input with plus/minus buttons, proper alignment, disabled state support, uses number values (not strings), and decimal/integer mode (uses TextInput from ui)
- **QuickActionButton** - Reusable quick action button with icon and title, uses consistent primary color for all icons (uses Card from ui)
- **useColorScheme** - Hook for consistent color theming across app

## Do Not:
- Use default navigation headers without customization
- Use default navigation headers for tab routes (always use Header component instead)
- Use hardcoded colors anywhere in the app
- Create new screens without proper SafeAreaView structure
- Use inline styles instead of StyleSheet.create
- Ignore error handling in async operations
- Use react-navigation directly (use expo-router instead)
- Create new components without checking existing ones first
- Use native components when UI library components exist

## Always:
- Follow the established header pattern with TouchableOpacity
- Use the Header component from `@/components/Header` as the default for all tab routes
- Use the color system from Colors.ts
- Check `@/components/` and `@/components/ui/` for existing components first
- Implement proper TypeScript typing
- Use Jotai for state management
- Maintain consistent component structure
- Include proper error handling and user feedback
- Export new UI components from `@/components/ui/index.ts`
- **ALWAYS** update this rules file when creating new components
